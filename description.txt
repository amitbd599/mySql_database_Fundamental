//!  Advantage of MySQL
    1) Cross Platform
    2) used with multiple language (PHP, NodeJs, Python, C#)
    3) MySQL software is open source
    4) MySQL is RDBMS
    5) The MySQL Database server is fast, reliable, scalable, and easy to use.


//! Popular Website using MySQL
    1) Facebook
    2) Twitter
    3) Google
    4) Wikipedia
    4) Youtube
    5) Flickr
    6) Pinterest




//! Database Create using MySQL CMD 
         
        CREATE DATABASE product_db;  // নতুন ডাটাবেস তৈরী করার জন্য এটি ব্যবহার করা হয়।


//! Create a table in product_db Database 

        CREATE TABLE product(
            
            id INT,
            name VARCHAR(20),
            company VARCHAR(30),
            price INT
            
        )


//! Insert a single data in product Table

        INSERT INTO product (id, name, price, company)
        VALUES(1, "Rice", 200, "LTD" );


//! Insert multiple data in product Table

        INSERT INTO product (id, name, price, company)
        VALUES
                (3, "DD", 200, "LTD" ),
                (4, "EE", 200, "LTD" ),
                (5, "GGF", 200, "LTD" ),
                (6, "QQ", 200, "LTD" ),
                (7, "BB", 200, "LTD" )



//! Limitations / Constraints -- সীমাবদ্ধতা তৈরীকরা

    => List of Limitations in MySQL

        1) NOT NULL  // এটি খালি রাখা যাবে না।
        2) UNIQUE    // UNIQUE ডাটা দেওয়ার জন্য এটি ব্যবহার করা হয়।
        3) DEFAULT   // DEFAULT ডাটা দেওয়ার জন্য এটি ব্যবহার করা হয়।
        4) CHECK    // (age>=18)
        5) FOREIGN KEY
        6) CHILD KEY


    => Create table using Limitations / Constraints

            CREATE TABLE student (
                id INT NOT NULL UNIQUE,
                name VARCHAR(50) NOT NULL,
                age INT NOT NULL CHECK (age>=18),
                gender VARCHAR(20) NOT NULL,
                phone VARCHAR(10) NOT NULL UNIQUE,
                city VARCHAR(40) NOT NULL DEFAULT "CTG"
              )


    => Insert multiple data in product Table

        INSERT INTO student(id, name, age, phone, gender, city)
        VALUES  (1,"Amit", 28,  01814331350, "Male", "CTG"),
                (2,"Amit", 28,  01814331351, "Male", "CTG"),
                (3,"Amit", 28,  01814331352, "Male", "CTG"),
                (4,"Amit", 28,  01814331353, "Male", "CTG")


    => Insert a single data in product Table

        INSERT INTO student(id, name, age, phone, gender, city)
        VALUES  (1,"Amit", 28,  01814331350, "Male", "CTG"),



//! MySQL SELECT With WHERE Clause

MySQL ডেটাবেস থেকে ডেটা নির্বাচন করার সাথে WHERE ক্লজ ব্যবহার করা হয় যেটি নির্দিষ্ট শর্তের মাধ্যমে নির্দিষ্ট সারির তথ্য নির্বাচন করে। 

        SELECT * FROM টেবিল_নাম WHERE শর্ত; // * মানে সকল কলাম কে সিলেক্ট করা।
        SELECT * FROM `student` WHERE 1
        SELECT name FROM `student` WHERE 1  // শুধুমাত্র name কলাম কে সিলেক্ট করা হয়েছে।
        SELECT id, name, age FROM `student` WHERE 1  // শুধুমাত্র id, name, age কলাম কে সিলেক্ট করা হয়েছে।


    //! AS এর ব্যবহার  // AS হল alias বা ছদ্মনাম
        SELECT id AS ID, name AS student_name, age AS student_age FROM `student` WHERE 1
        SELECT id AS ID, name AS "student name", age AS student_age FROM `student` WHERE 1  // যদি নামের মধ্যে space রাখতে হয় তবে " " দিতে হবে।



//! MySQL WHERE all comparison operators list

        1. `=`: Equal to
        - Example: `column_name = value`

        2. `!=` or `<>`: Not equal to
        - Example: `column_name != value`

        3. `>`: Greater than
        - Example: `column_name > value`

        4. `<`: Less than
        - Example: `column_name < value`

        5. `>=`: Greater than or equal to
        - Example: `column_name >= value`

        6. `<=`: Less than or equal to
        - Example: `column_name <= value`

        7. `BETWEEN`: Between a range (inclusive)
        - Example: `column_name BETWEEN value1 AND value2`

        8. `NOT BETWEEN`: Not between a range
        - Example: `column_name NOT BETWEEN value1 AND value2`

        9. `LIKE`: Match a pattern using wildcards
        - Example: `column_name LIKE 'pattern'`

        10. `NOT LIKE`: Does not match a pattern
            - Example: `column_name NOT LIKE 'pattern'`

        11. `IN`: Matches any value in a list
            - Example: `column_name IN (value1, value2, ...)`

        12. `NOT IN`: Does not match any value in a list
            - Example: `column_name NOT IN (value1, value2, ...)`

        13. `IS NULL`: Checks for NULL values
            - Example: `column_name IS NULL`

        14. `IS NOT NULL`: Checks for non-NULL values
            - Example: `column_name IS NOT NULL`

        15. `IS TRUE` or `IS FALSE`: Checks for boolean true or false values
            - Example: `column_name IS TRUE`

        16. `IS NOT TRUE` or `IS NOT FALSE`: Checks for values that are not boolean true or false
            - Example: `column_name IS NOT TRUE`



//! MySQL AND, OR, NOT Operators

        1) AND Operator
            SELECT * FROM `student` WHERE name = "Raj" AND age = 28;

        2) OR Operator
            SELECT * FROM `student` WHERE name = "Raj" OR age = 28;

        3) NOT Operator
            SELECT * FROM `student` WHERE NOT age = 28;

        4) Combining Operators
            SELECT * FROM `student` WHERE (name = "Raj" AND age = 28) OR phone = "01814331351";




//! MySQL LIKE Operator & Wildcards 

      1)  MySQL এর LIKE অপারেটরটি ব্যবহার হয় টেক্সট ডেটা খুঁজে পেতে বা ডেটাবেসের স্ট্রিং ডেটা এবং প্যাটার্নের সাথে মিলান করার জন্য।      নিম্নলিখিত কারণগুলি হতে পারে মুক্তিপ্রাপ্ত করতে LIKE অপারেটরটি ব্যবহার করা:

     2) প্যাটার্ন ম্যাচিং: LIKE অপারেটরটি প্যাটার্ন ম্যাচিং করতে সাহায্য করে। আপনি এর মাধ্যমে টেক্সট ডেটা এর মধ্যে নির্দিষ্ট প্যাটার্ন খুঁজে পেতে পারেন, যা সাধারণ স্ট্রিং সার্চ দিতে ব্যবহৃত হয়।

      3)  সল্যুশন সম্প্রসারণ: এটি ডেটাবেস থেকে নির্দিষ্ট ডেটা সল্যুশন করতে সাহায্য করে। যেমন, আপনি পেসেজ টেবিল থেকে সমস্ত নামের সাথে "ম্যাক্স" থাকা পেসেজ সিলেক্ট করতে চান।

      4)  ফিল্টারিং: LIKE অপারেটরটি ডেটা ফিল্টার করতে সাহায্য করে। আপনি ডেটাবেসের স্ট্রিং ডেটা সিলেক্ট করতে পারেন এবং একটি নির্দিষ্ট প্যাটার্নের সাথে মিলান করতে পারেন।

      5)  সাধারণ স্ট্রিং খুঁজে পেতে: সাধারণ টেক্সট খুঁজে পেতে এটি ব্যবহার করা হয়, যেটি ডেটাবেসের স্ট্রিং ডেটা বের করার জন্য খুব সাধারণ এবং সহজ উপায়।

        সংক্ষেপে, LIKE অপারেটরটি টেক্সট ডেটা ম্যাচিং এবং স্ট্রিং ডেটা সম্পূর্ণ সাধারণ খুঁজে পেতে এবং প্যাটার্ন ম্যাচিং করতে ব্যবহৃত হয়।

        What is a wildcard in database?
        The wildcard is an advanced search technique that can be used to maximize your search results in library databases. 

        1. Wildcard at the beginning:
        - `LIKE '%keyword'`: Matches any string ending with 'keyword'.
        Example: `SELECT * FROM products WHERE product_name LIKE '%apple';`

        2. Wildcard at the end:
        - `LIKE 'keyword%'`: Matches any string starting with 'keyword'.
        Example: `SELECT * FROM customers WHERE last_name LIKE 'Smith%';`

        3. Wildcard at both ends:
        - `LIKE '%keyword%'`: Matches any string containing 'keyword' anywhere.
        Example: `SELECT * FROM articles WHERE content LIKE '%MySQL%';`

        4. Single-character wildcard:
        - `LIKE 'a_c'`: Matches strings where the middle character is 'a', and the first and third characters can be anything.
        Example: `SELECT * FROM words WHERE word LIKE 'cat';`

        5. Single-character wildcard:
         - if Matches fast and last character
        SELECT * FROM `student` WHERE name LIKE "a%t%"




//! MySQL Regular Expression

    MySQL রেগুলার এক্সপ্রেশন ব্যবহার করা হয় কারণ:

       1) প্যাটার্ন ম্যাচিং: রেগুলার এক্সপ্রেশন দিয়ে আপনি টেক্সট ডেটা এর মধ্যে নির্দিষ্ট প্যাটার্ন খুঁজে বের করতে পারেন। এটি আপনাকে      ডেটাবেসে নির্দিষ্ট শব্দ, বাক্য, বা স্ট্রাকচার খুঁজে বের করতে সাহায্য করে।

       2) এক্সপ্রেশনের সল্যুশন সম্প্রসারণ: এটি আপনাকে কমপ্লেক্স প্যাটার্ন সল্যুশনের জন্য দ্বিধায় ব্যবহার করা যায়। আপনি এখানে জনপ্রিয় কাজের উদাহরণ হিসেবে ইমেইল ঠিকানা যাচাই করতে, টেক্সট থেকে ইউআরএল বের করতে, বা টেক্সট ডেটা ফর্ম্যাট করতে পারেন।

       3) ডেটা পরিষ্করণ: রেগুলার এক্সপ্রেশন ব্যবহার করে ডেটা পরিষ্করণের জন্য এটি অত্যন্ত দরকারী। উদাহরণস্বরূপ, আপনি রেগুলার এক্সপ্রেশন ব্যবহার করে ইমেইল ঠিকানা গুলি বাছাই করতে, টেক্সট ডেটা থেকে নির্দিষ্ট তথ্য বের করতে এবং টেক্সট ডেটা ফর্ম্যাট করতে পারেন।

       4) ডেটা ফিল্টারিং: আপনি রেগুলার এক্সপ্রেশন ব্যবহার করে ডেটা ফিল্টার করতে পারেন, যা নির্দিষ্ট প্যাটার্ন মেলে থাকবে। এটি একটি ডেটাবেস থেকে সম্পূর্ণ পোস্ট সিলেক্ট করার সাথে সাথে একটি সুস্পষ্ট স্লাইস নির্ধারণ করতে সাহায্য করে।


    => Regular Expression pattern

    Sign            Pattern                         Description
                    'mit'                           Matches any string containing '' anywhere 
    Λ               '^ra'                           Beginning of string
    $               'an$'                           End of string
    [.....]         '[rm]'                          Any character listed between the square brackets // check it single r and m
    ^[...]          '^[rms]'                        Begins with Any character listed between the square brackets
    [a-z]           '[a-h]e'                        Match with in the range
    p1|p2|p3        'tom | dick | harry'            Matches any of the patterns p1, p2, or p3


    SELECT * FROM `student` WHERE name REGEXP "am"
    SELECT * FROM `student` WHERE name REGEXP "^it"
    SELECT * FROM `student` WHERE name REGEXP "it$"
    SELECT * FROM `student` WHERE name REGEXP "[za]"
    SELECT * FROM `student` WHERE name REGEXP '^[za]'
    SELECT * FROM `student` WHERE name REGEXP 'Amit|Raj';




//! MySQL ORDER BY & DISTINCT

    1) Ascending Order
    SELECT * FROM `personal_data` ORDER BY `date_of_birth`

    2) Descending Order
    SELECT * FROM `personal_data` ORDER BY  `date_of_birth` DESC


//! MySQL LIMIT & OFFSET

    SELECT * FROM `personal_data` LIMIT 3; // only limit use
    SELECT * FROM `personal_data` LIMIT 2, 3; // First is OFFSET/skip (যেখান হতে েশুরু হবে গননা)  & 2nd is LIMIT
    SELECT * FROM `personal_data` WHERE `date_of_birth` > "1992-02-10" LIMIT 2;


//! MySQL, aggregate functions

        1. COUNT(): Counts the number of rows in a group.
        SELECT COUNT(`column Name`) FROM `table`; //Demo
        SELECT COUNT(*) FROM personal_data;
        SELECT COUNT(`first_name`) FROM personal_data;
        SELECT COUNT(DISTINCT `city`) FROM personal_data //DISTINCT -হল শুধুমাত্র unique value গুলি দেখাবে।
     
        2. SUM(): Calculates the sum of a numeric column in a group.
        SELECT SUM(`column Name`) FROM `table`; //Demo
        SELECT SUM(total_price) FROM sales;


        3. AVG(): Computes the average of a numeric column in a group.
        SELECT AVG(`column Name`) FROM `table`; //Demo
        SELECT AVG(salary) FROM employees;

        4. MAX(): Returns the maximum value in a group.
        SELECT MAX(`column Name`) FROM `table`; //Demo
        SELECT MAX(score) FROM exam_results;

        5. MIN(): Returns the minimum value in a group. ===================================================
        SELECT MIN(`column Name`) FROM `table`; //Demo
        SELECT MIN(price) FROM products;

        6. GROUP_CONCAT(): Concatenates values from multiple rows into a single string, optionally separated by a delimiter.
        SELECT SUM(`column Name`) FROM `table`; //Demo
        SELECT GROUP_CONCAT(product_name SEPARATOR ', ') FROM shopping_cart;

        7. GROUPING SETS: Allows you to specify multiple grouping criteria and calculate aggregates for each set.
        SELECT department, SUM(salary) FROM employees
        GROUP BY GROUPING SETS (department, NULL);

        8. HAVING: Used with `GROUP BY` to filter the results of aggregate functions based on a condition.
        SELECT department, AVG(salary) FROM employees
        GROUP BY department
        HAVING AVG(salary) > 50000;

        9. STDDEV() and VARIANCE():** Calculate the standard deviation and variance of a numeric column, respectively.
        SELECT STDDEV(score) FROM exam_results;
        SELECT VARIANCE(price) FROM products;

        10. BIT_OR() and BIT_AND():** Perform bitwise OR and bitwise AND operations on a numeric column, respectively.
            SELECT BIT_OR(flags) FROM flags_table;
            SELECT BIT_AND(permissions) FROM permissions_table;


